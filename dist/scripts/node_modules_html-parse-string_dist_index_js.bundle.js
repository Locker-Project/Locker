"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunklocker_typescript"] = self["webpackChunklocker_typescript"] || []).push([["node_modules_html-parse-string_dist_index_js"],{

/***/ "./node_modules/html-parse-string/dist/index.js":
/*!******************************************************!*\
  !*** ./node_modules/html-parse-string/dist/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"parse\": () => (/* binding */ parse),\n/* harmony export */   \"stringify\": () => (/* binding */ stringify)\n/* harmony export */ });\n// Based on package html-parse-stringify2\n// Expanded to handle webcomponents\n\nconst tagRE = /(?:<!--[\\S\\s]*?-->|<(?:\"[^\"]*\"['\"]*|'[^']*'['\"]*|[^'\">])+>)/g;\n\n// See https://regexr.com/6p8p0\nconst attrRE = /(?:\\s(?<boolean>[^/\\s><=]+?)(?=[\\s/>]))|(?:(?<name>\\S+?)(?:\\s*=\\s*(?:(['\"])(?<quotedValue>[\\s\\S]*?)\\3|(?<unquotedValue>[^\\s>]+))))/g;\n//                   ^ capture group 1: boolean attribute name (attributes without values)\n//                                                         ^ capture group 2: non-boolean attribute name\n//                                                                                         ^ capture group 4: non-boolean attribute value with quotes\n//                                                                                                                    ^ capture group 5: non-boolean attribute value without quotes\n// TODO\n//  - \"/\" values in the middle of the HTML tag (they don't self-close the element, but skipped)\n//  - What other cases?\n\nconst lookup = {\n  area: true,\n  base: true,\n  br: true,\n  col: true,\n  embed: true,\n  hr: true,\n  img: true,\n  input: true,\n  keygen: true,\n  link: true,\n  menuitem: true,\n  meta: true,\n  param: true,\n  source: true,\n  track: true,\n  wbr: true\n};\nfunction parseTag( /**@type {string}*/tag) {\n  const res = {\n    type: 'tag',\n    name: '',\n    voidElement: false,\n    attrs: {},\n    children: []\n  };\n  const tagMatch = tag.match(/<\\/?([^\\s]+?)[/\\s>]/);\n  if (tagMatch) {\n    res.name = tagMatch[1];\n    if (lookup[tagMatch[1].toLowerCase()] || tag.charAt(tag.length - 2) === '/') {\n      res.voidElement = true;\n    }\n\n    // handle comment tag\n    if (res.name.startsWith('!--')) {\n      const endIndex = tag.indexOf('-->');\n      return {\n        type: 'comment',\n        comment: endIndex !== -1 ? tag.slice(4, endIndex) : ''\n      };\n    }\n  }\n  const reg = new RegExp(attrRE);\n  for (const match of tag.matchAll(reg)) {\n    // TODO named groups method not working yet, groups is undefined in tests (maybe not out in Node.js yet)\n    // const groups = match.groups\n    // res.attrs[groups.boolean || groups.name] = groups.value1 || groups.value2 || \"\"\n\n    res.attrs[match[1] || match[2]] = match[4] || match[5] || '';\n  }\n  return res;\n}\n// common logic for pushing a child node onto a list\nfunction pushTextNode(list, html, start) {\n  // calculate correct end of the content slice in case there's\n  // no tag after the text node.\n  const end = html.indexOf('<', start);\n  const content = html.slice(start, end === -1 ? void 0 : end);\n  if (!/^\\s*$/.test(content)) {\n    list.push({\n      type: 'text',\n      content: content\n    });\n  }\n}\nfunction pushCommentNode(list, tag) {\n  // calculate correct end of the content slice in case there's\n  // no tag after the text node.\n  const content = tag.replace('<!--', '').replace('-->', '');\n  if (!/^\\s*$/.test(content)) {\n    list.push({\n      type: 'comment',\n      content: content\n    });\n  }\n}\nfunction parse(html) {\n  const result = [];\n  let current = void 0;\n  let level = -1;\n  const arr = [];\n  const byTag = {};\n  html.replace(tagRE, (tag, index) => {\n    const isOpen = tag.charAt(1) !== '/';\n    const isComment = tag.slice(0, 4) === '<!--';\n    const start = index + tag.length;\n    const nextChar = html.charAt(start);\n    let parent = void 0;\n    if (isOpen && !isComment) {\n      level++;\n      current = parseTag(tag);\n      if (!current.voidElement && nextChar && nextChar !== '<') {\n        pushTextNode(current.children, html, start);\n      }\n      byTag[current.tagName] = current;\n      // if we're at root, push new base node\n      if (level === 0) {\n        result.push(current);\n      }\n      parent = arr[level - 1];\n      if (parent) {\n        parent.children.push(current);\n      }\n      arr[level] = current;\n    }\n    if (isComment) {\n      if (level < 0) {\n        pushCommentNode(result, tag);\n      } else {\n        pushCommentNode(arr[level].children, tag);\n      }\n    }\n    if (isComment || !isOpen || current.voidElement) {\n      if (!isComment) {\n        level--;\n      }\n      if (nextChar !== '<' && nextChar) {\n        // trailing text node\n        // if we're at the root, push a base text node. otherwise add as\n        // a child to the current node.\n        parent = level === -1 ? result : arr[level].children;\n        pushTextNode(parent, html, start);\n      }\n    }\n  });\n  return result;\n}\n\n// Based on package html-parse-stringify2\n// Expanded to handle webcomponents\n\nfunction attrString(attrs) {\n  const buff = [];\n  for (const key in attrs) {\n    buff.push(key + '=\"' + attrs[key].replace(/\"/g, '&quot;') + '\"');\n  }\n  if (!buff.length) {\n    return '';\n  }\n  return ' ' + buff.join(' ');\n}\nfunction stringifier(buff, doc) {\n  switch (doc.type) {\n    case 'text':\n      return buff + doc.content;\n    case 'tag':\n      buff += '<' + doc.name + (doc.attrs ? attrString(doc.attrs) : '') + (doc.voidElement ? '/>' : '>');\n      if (doc.voidElement) {\n        return buff;\n      }\n      return buff + doc.children.reduce(stringifier, '') + '</' + doc.name + '>';\n    case 'comment':\n      return buff += '<!--' + doc.content + '-->';\n  }\n}\nfunction stringify(doc) {\n  return doc.reduce(function (token, rootEl) {\n    return token + stringifier('', rootEl);\n  }, '');\n}\n\n\n//# sourceURL=webpack://locker-typescript/./node_modules/html-parse-string/dist/index.js?");

/***/ })

}]);